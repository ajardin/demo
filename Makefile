SELF_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
PHP_SERVICE := docker-compose exec php sh -c

export APP_ENV := $(shell grep APP_ENV $(SELF_DIR).env | awk -F '=' '{print $$NF}')

##
## ----------------------------------------------------------------------------
##   Environment
## ----------------------------------------------------------------------------
##

build: ## Build the environment
	docker-compose build

config: ## Generate the ".env" and "phpunit.xml" files if they don't already exist and update Doctrine configuration
	-@test -f .env || \
		(cp .env.dist .env && \
		export $$(cat .env | grep -v ^\# | xargs) && \
		perl -i -pe "s|^DATABASE_URL=.*|DATABASE_URL=postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}\@postgres:5432/$${POSTGRES_DB}|g" .env)
	-@test -f phpunit.xml || \
		(cp phpunit.xml.dist phpunit.xml && \
		export $$(cat .env | grep -v ^\# | xargs) && \
		perl -i -pe "s|\"DATABASE_URL\" value=\".*\"|\"DATABASE_URL\" value=\"postgres://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}\@postgres:5432/$${POSTGRES_DB}\"|g" phpunit.xml)
	-perl -i -pe "s|driver: 'pdo_sqlite'|driver: 'pdo_pgsql'|g" config/packages/doctrine.yaml
	-perl -i -pe "s|server_version: '3.15'|server_version: '10.5'|g" config/packages/doctrine.yaml
	-perl -i -pe "s|charset: utf8mb4|charset: 'utf8'|g" config/packages/doctrine.yaml
	@printf "doctrine:\n    dbal:\n        url: '%%env(resolve:DATABASE_URL)%%_test'\n" > config/packages/test/doctrine.yaml

install: ## Install the environment
	make config build start composer yarn
	@make reset
	-open http://localhost:8000

logs: ## Follow logs generated by all containers
	docker-compose logs -f --tail=0

logs-full: ## Follow logs generated by all containers from the containers creation
	docker-compose logs -f

ps: ## List all containers managed by the environment
	docker-compose ps

restart: ## Restart the environment
	docker-compose restart

start: ## Start the environment
	docker-compose up -d --remove-orphans

stats: ## Print real-time statistics about containers ressources usage
	docker stats $(docker ps --format={{.Names}})

stop: ## Stop the environment
	docker-compose stop

uninstall: ## Uninstall the environment
	make config
	docker-compose kill
	docker-compose down --volumes --remove-orphans

.PHONY: build config install logs logs-full ps restart start stats stop uninstall

##
## ----------------------------------------------------------------------------
##   Project
## ----------------------------------------------------------------------------
##

composer: ## Install Composer dependencies from the "php" container
	$(PHP_SERVICE) "composer install --optimize-autoloader"

encore-dev: ## Compile assets once with Encore/Webpack
	$(PHP_SERVICE) "yarn run encore dev"

encore-prod: ## Compile assets once with Encore/Webpack and minify & optimize them
	$(PHP_SERVICE) "yarn run encore production"

encore-watch: ## Compile assets automatically with Encore/Webpack when files change
	$(PHP_SERVICE) "yarn run encore dev --watch"

nginx: ## Open a terminal in the "nginx" container
	docker-compose exec nginx sh

php: ## Open a terminal in the "php" container
	docker-compose exec php sh

reset: ## Reset the database used by the specified environment
	$(PHP_SERVICE) "export APP_ENV=${APP_ENV} && \
		php bin/console doctrine:database:drop --if-exists --force && \
		php bin/console doctrine:database:create --if-not-exists && \
		php bin/console doctrine:schema:create --no-interaction && \
		php bin/console doctrine:fixtures:load --no-interaction"

yarn: ## Install Yarn dependencies from the "php" container"
	$(PHP_SERVICE) "yarn install"

.PHONY: composer encore-dev encore-prod encore-watch nginx php reset yarn

##
## ----------------------------------------------------------------------------
##   Quality
## ----------------------------------------------------------------------------
##

check: ## Execute all quality assurance tools
	make lint phpcsfixer phpunit security

lint: ## Lint YAML configuration, Twig templates and JavaScript files
	$(PHP_SERVICE) "php bin/console lint:yaml config"
	$(PHP_SERVICE) "php bin/console lint:twig templates"

phpcsfixer: ## Run the PHP coding standards fixer on dry-run mode
	@test -f .php_cs || cp .php_cs.dist .php_cs
	$(PHP_SERVICE) "php vendor/bin/php-cs-fixer fix --config=.php_cs \
		--cache-file=var/cache/.php_cs --verbose --dry-run"

phpcsfixer-apply: ## Run the PHP coding standards fixer on apply mode
	@test -f .php_cs || cp .php_cs.dist .php_cs && \
	$(PHP_SERVICE) "php vendor/bin/php-cs-fixer fix --config=.php_cs \
		--cache-file=var/cache/.php_cs --verbose"

phpunit: ## Run the tests suit (unit & functional)
	@make reset APP_ENV=test
	$(PHP_SERVICE) "./bin/phpunit"

security: ## Run a security analysis on dependencies
	$(PHP_SERVICE) "php bin/console security:check"

.PHONY: check lint phpcsfixer phpcsfixer-apply phpunit security

.DEFAULT_GOAL := help
help:
	@grep -E '(^[a-zA-Z_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' \
		| sed -e 's/\[32m##/[33m/'
.PHONY: help
